class House:
    houses_history = []

    def __new__(cls, *args, **kwargs):
        house_name_histery = args[0]
        cls.houses_history.append(house_name_histery)
        return super().__new__(cls)

    def __init__(self, name, number_of_floors):
        self.name = name
        self.number_of_floors = number_of_floors

    def go_to(self, new_floor=1):
        floor = 0
        if new_floor < 1 or new_floor > self.number_of_floors:
            print(f'"{new_floor} этажа не существует"')
        else:
            for i in range(new_floor):
                floor += 1
                print(floor)

    def __len__(self):
        return self.number_of_floors

    def __str__(self):
        return f'Название: {self.name}, кол-во этажей: {self.number_of_floors}'

    def __eq__(self, other):
        if isinstance(other, int):
            return self.number_of_floors == other
        elif isinstance(other, House):
            return self.number_of_floors == other.number_of_floors

    def __lt__(self, other):
        if isinstance(other, int):
            return self.number_of_floors < other
        elif isinstance(other, House):
            return self.number_of_floors < other.number_of_floors

    def __le__(self, other):
        if isinstance(other, int):
            return self.number_of_floors <= other
        elif isinstance(other, House):
            return self.number_of_floors <= other.number_of_floors

    def __gt__(self, other):
        if isinstance(other, int):
            return self.number_of_floors > other
        elif isinstance(other, House):
            return self.number_of_floors > other.number_of_floors

    def __ge__(self, other):
        if isinstance(other, int):
            return self.number_of_floors >= other
        elif isinstance(other, House):
            return self.number_of_floors >= other.number_of_floors

    def __ne__(self, other):
        if isinstance(other, int):
            return self.number_of_floors != other
        elif isinstance(other, House):
            return self.number_of_floors != other.number_of_floors

    def __add__(self, other):
        if isinstance(other, int):
            self.number_of_floors += other
        elif isinstance(other, House):
            self.number_of_floors += other.number_of_floors
        return self

    def __radd__(self, other):
        return self.__add__(other)

    def __iadd__(self, other):
        return self.__add__(other)

    def __del__(self):
        print(f"'{self.name} снесён, но он останется в истории'")


# h1 = House('ЖК Горский', 18)
# h2 = House('Домик в деревне', 2)
# h3 = House('Эльбрус', 5)
# h1.go_to(5)
# h2.go_to(10)
# h3.go_to(6)
#
# h3 = House('ЖК Эльбрус', 10)
# h4 = House('ЖК Акация', 20)

# # __str__
# print(h1)
# print(h2)
# print(h3)
# print(h4)
#
# # __len__
# print(len(h1))
# print(len(h2))
# print(len(h3))
# print(len(h4))
# print()
#
# # __________________module 5.3________________________
# print('module 5.3'.upper())
# print(h3)
# print(h4)
#
# print(h3 == h4)  # __eq__
#
# h3 = h3 + 10  # __add__
# print(h3)
# print(h3 == h4)
#
# h3 += 10  # __iadd__
# print(h3)
#
# h4 = 10 + h4  # __radd__
# print(h4)
#
# print(h3 > h4)  # __gt__
# print(h3 >= h4)  # __ge__
# print(h3 < h4)  # __lt__
# print(h3 <= h4)  # __le__
# print(h3 != h4)  # __ne__
print()

# __________________module 5.4________________________
print('module 5.4'.upper())
h1 = House('ЖК Эльбрус', 10)
print(House.houses_history)
h2 = House('ЖК Акация', 20)
print(House.houses_history)
h3 = House('ЖК Матрёшки', 20)
print(House.houses_history)

# Удаление объектов
del h2
del h3

print(House.houses_history)
